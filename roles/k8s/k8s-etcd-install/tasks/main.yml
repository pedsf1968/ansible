---
# Install ETCD

- name: "Reset kubeadm if present"
  shell: kubeadm reset -f
  register: kubeadm_reset

- name: "Temporary directory creation"
  file:
    path: "/tmp/{{ inventory_hostname }}"
    state: directory

- name: "Temporary directory creation"
  file:
    path: "/tmp/{{ inventory_hostname }}"
    state: directory

- name: "Build ETCD endpoint list"
  set_fact:
    infra_endpoints: "{% for item in groups['masters'] %}INFRA-{{ item[-2:] }}=https://{{ item }}:2380 {% endfor %}"

- name: "Create ETCD intrastructure list"
  set_fact:
    etcd_infra_list="{{ infra_list|default([]) + [item] }}"
  with_items: "{{ infra_endpoints.split() }}"

- name: "Generate kubeadm config file"
  template:
    src: kubeadm-etcd-config.j2
    dest: "/tmp/{{ inventory_hostname }}/kubeadm-etcd-config.yml"

- name: "Generate ETCD certifications etcd-ca"
  command: kubeadm init phase certs etcd-ca

- name: "Generate ETCD certifications"
  command: "kubeadm init phase certs {{ item }} --config=/tmp/{{ inventory_hostname }}/kubeadm-etcd-config.yml"
  with_items:
    - etcd-server
    - etcd-peer
    - etcd-healthcheck-client 
    - apiserver-etcd-client

- name: "Delete ca.* for other masters"
  file:
    path: /etc/kubernetes/pki/etcd/{{ item }}
    state: absent
  with_items: 
    - ca.crt
    - ca.key
  when: inventory_hostname != kubernetes_first_master_dns

- name: "Fetch ca.crt from {{ kubernetes_first_master_dns }}"
  fetch:
    src: /etc/kubernetes/pki/etcd/ca.crt 
    dest: /tmp/{{ inventory_hostname }}/ca.crt
    flat: yes
  when: inventory_hostname == kubernetes_first_master_dns

- name: "Copy ca.crt to other masters"
  copy:
    src: /tmp/{{ kubernetes_first_master_dns }}/ca.crt
    dest: /etc/kubernetes/pki/etcd/ca.crt
  when: inventory_hostname != kubernetes_first_master_dns

- name: "ETCD init"
  command: "kubeadm init phase etcd local --config=/tmp/{{ inventory_hostname }}/kubeadm-etcd-config.yml"
